// Code generated by hertz generator.

package oss

import (
	"context"

	"sfw/biz/model/api/oss"
	"sfw/biz/service"
	osspk "sfw/pkg/oss"
	"sfw/pkg/utils/logger"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// OssCallbackAvatarMethod .
// @router /api/v1/oss/callback/avatar [POST]
func OssCallbackAvatarMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req oss.OssCallbackAvatarReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.RuntimeLogger.Infof("bind and validate err: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}

	httpReq, err := adaptor.GetCompatRequest(c.GetRequest())
	if err != nil {
		logger.RuntimeLogger.Infof("get compat request err: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}
	ok, err := osspk.Verify(httpReq)
	if err != nil || !ok {
		logger.RuntimeLogger.Infof("oss verify error: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}

	err = service.NewOssService(ctx, c).NewCallbackAvatarEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		c.Status(consts.StatusOK)
		return
	}

	c.Status(consts.StatusOK)
}

// OssCallbackFopMethod .
// @router /api/v1/oss/callback/fop [POST]
func OssCallbackFopMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req oss.OssCallbackFopReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(oss.OssCallbackFopResp)

	c.JSON(consts.StatusOK, resp)
}

// OssCallbackVideoMethod .
// @router /api/v1/oss/callback/video [POST]
func OssCallbackVideoMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req oss.OssCallbackVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.RuntimeLogger.Infof("bind and validate err: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}
	httpReq, err := adaptor.GetCompatRequest(c.GetRequest())
	if err != nil {
		logger.RuntimeLogger.Infof("get compat request err: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}
	ok, err := osspk.Verify(httpReq)
	if err != nil || !ok {
		logger.RuntimeLogger.Infof("oss verify error: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}

	err = service.NewOssService(ctx, c).NewCallbackVideoEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		c.Status(consts.StatusBadRequest)
		return
	}

	c.Status(consts.StatusOK)
}

// OssCallbackVideoCoverMethod .
// @router /api/v1/oss/callback/video/cover [POST]
func OssCallbackVideoCoverMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req oss.OssCallbackVideoCoverReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.RuntimeLogger.Infof("bind and validate err: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}
	httpReq, err := adaptor.GetCompatRequest(c.GetRequest())
	if err != nil {
		logger.RuntimeLogger.Infof("get compat request err: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}
	ok, err := osspk.Verify(httpReq)
	if err != nil || !ok {
		logger.RuntimeLogger.Infof("oss verify error: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}

	c.Status(consts.StatusOK)
}

// OssCallbackImageMethod .
// @router /api/v1/oss/callback/image [POST]
func OssCallbackImageMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req oss.OssCallbackImageReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.RuntimeLogger.Infof("bind and validate err: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}
	httpReq, err := adaptor.GetCompatRequest(c.GetRequest())
	if err != nil {
		logger.RuntimeLogger.Infof("get compat request err: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}
	ok, err := osspk.Verify(httpReq)
	if err != nil || !ok {
		logger.RuntimeLogger.Infof("oss verify error: %v, ip: %v", err, c.ClientIP())
		c.Status(consts.StatusBadRequest)
		return
	}

	err = service.NewOssService(ctx, c).NewCallbackImageEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	c.Status(consts.StatusOK)
}
