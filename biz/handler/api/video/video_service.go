// Code generated by hertz generator.

package video

import (
	"context"

	video "sfw/biz/model/api/video"
	"sfw/biz/service"
	"sfw/pkg/errno"
	"sfw/pkg/utils"
	"sfw/pkg/utils/logger"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// VideoFeedMethod .
// @router /api/v1/video/feed [GET]
func VideoFeedMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoFeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoFeedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewFeedEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoFeedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoFeedResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoInfoMethod .
// @router /api/v1/video/info [GET]
func VideoInfoMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoInfoResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewInfoEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoInfoResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoInfoResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoPublishMethod .
// @router /api/v1/video/publish [POST]
func VideoPublishMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPublishReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoPublishResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewPublishEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoPublishResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoPublishResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoCategoriesMethod .
// @router /api/v1/video/categories [GET]
func VideoCategoriesMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoCategoriesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoCategoriesResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewCategoriesEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoCategoriesResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoCategoriesResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: &video.VideoCategoriesRespData{
			Items: resp,
		},
	})
}

// VideoListMethod .
// @router /api/v1/video/list [GET]
func VideoListMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoListResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewListEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoListResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoListResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoSubmitAllMethod .
// @router /api/v1/video/submit/all [GET]
func VideoSubmitAllMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSubmitAllReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoSubmitAllResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewSubmitAllEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoSubmitAllResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoSubmitAllResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoSubmitReviewMethod .
// @router /api/v1/video/submit/review [GET]
func VideoSubmitReviewMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSubmitReviewReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoSubmitReviewResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewSubmitReviewEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoSubmitReviewResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoSubmitReviewResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoSubmitLockedMethod .
// @router /api/v1/video/submit/locked [GET]
func VideoSubmitLockedMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSubmitLockedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoSubmitLockedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewSubmitLockedEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoSubmitLockedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoSubmitLockedResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoSubmitPassedMethod .
// @router /api/v1/video/submit/passed [GET]
func VideoSubmitPassedMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSubmitPassedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoSubmitPassedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewSumitPassedEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoSubmitPassedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoSubmitPassedResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoSearchMethod .
// @router /api/v1/video/search [GET]
func VideoSearchMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSearchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoSearchResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewSearchEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoSearchResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoSearchResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoCoverUploadMethod .
// @router /api/v1/video/cover/upload [POST]
func VideoCoverUploadMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoCoverUploadReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoCoverUploadResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewCoverUploadEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoCoverUploadResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoCoverUploadResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoCustomFeedMethod .
// @router /api/v1/video/custom/feed [GET]
func VideoCustomFeedMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoCustomFeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoCustomFeedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewCustomFeedEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoCustomFeedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoCustomFeedResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// VideoNeighbourFeedMethod .
// @router /api/v1/video/neighbour/feed [GET]
func VideoNeighbourFeedMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoNeighbourFeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusBadRequest, video.VideoNeighbourFeedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewVideoService(ctx, c).NewNeighbourFeedEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoNeighbourFeedResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoNeighbourFeedResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}
