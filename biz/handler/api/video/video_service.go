// Code generated by hertz generator.

package video

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	video "sfw/biz/model/api/video"
)

// VideoFeedMethod .
// @router /api/v1/video/feed [GET]
func VideoFeedMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoFeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoFeedResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoInfoMethod .
// @router /api/v1/video/info [GET]
func VideoInfoMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoInfoResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoPublishMethod .
// @router /api/v1/video/publish [POST]
func VideoPublishMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPublishReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoPublishResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoCategoriesMethod .
// @router /api/v1/video/categories [GET]
func VideoCategoriesMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoCategoriesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoCategoriesResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoListMethod .
// @router /api/v1/video/list [GET]
func VideoListMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoListResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoPopularMethod .
// @router /api/v1/video/popular [GET]
func VideoPopularMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPopularReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoPopularResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoSubmitAllMethod .
// @router /api/v1/video/submit/all [GET]
func VideoSubmitAllMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSubmitAllReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoSubmitAllResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoSubmitReviewMethod .
// @router /api/v1/video/submit/review [GET]
func VideoSubmitReviewMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSubmitReviewReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoSubmitReviewResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoSubmitLockedMethod .
// @router /api/v1/video/submit/locked [GET]
func VideoSubmitLockedMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSubmitLockedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoSubmitLockedResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoSubmitPassedMethod .
// @router /api/v1/video/submit/passed [GET]
func VideoSubmitPassedMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSubmitPassedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoSubmitPassedResp)

	c.JSON(consts.StatusOK, resp)
}

// VideoSearchMethod .
// @router /api/v1/video/search [GET]
func VideoSearchMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSearchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.VideoSearchResp)

	c.JSON(consts.StatusOK, resp)
}
