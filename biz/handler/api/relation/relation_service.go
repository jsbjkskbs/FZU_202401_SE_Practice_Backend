// Code generated by hertz generator.

package relation

import (
	"context"

	relation "sfw/biz/model/api/relation"
	"sfw/biz/service"
	"sfw/pkg/errno"
	"sfw/pkg/utils"
	"sfw/pkg/utils/logger"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FollowActionMethod .
// @router /api/v1/relation/follow/action [POST]
func FollowActionMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationFollowActionResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	err = service.NewRelationService(ctx, c).NewFollowActionEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationFollowActionResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, relation.RelationFollowActionResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
	})
}

// FollowListMethod .
// @router /api/v1/relation/follow/list [GET]
func FollowListMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationFollowListResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewRelationService(ctx, c).NewFollowListEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationFollowListResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, relation.RelationFollowListResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// FollowerListMethod .
// @router /api/v1/relation/follower/list [GET]
func FollowerListMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowerListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationFollowerListResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewRelationService(ctx, c).NewFollowerListEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationFollowerListResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, relation.RelationFollowerListResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}

// FriendListMethod .
// @router /api/v1/relation/friend/list [GET]
func FriendListMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFriendListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationFriendListResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	resp, err := service.NewRelationService(ctx, c).NewFriendListEvent(&req)
	if err != nil {
		logger.LogRuntimeError(err)
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationFriendListResp{
			Code: resp.Code,
			Msg:  resp.Msg,
		})
		return
	}

	c.JSON(consts.StatusOK, relation.RelationFriendListResp{
		Code: errno.NoError.Code,
		Msg:  errno.NoError.Message,
		Data: resp,
	})
}
