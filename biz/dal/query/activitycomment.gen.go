// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sfw/biz/dal/model"
)

func newActivityComment(db *gorm.DB, opts ...gen.DOOption) activityComment {
	_activityComment := activityComment{}

	_activityComment.activityCommentDo.UseDB(db, opts...)
	_activityComment.activityCommentDo.UseModel(&model.ActivityComment{})

	tableName := _activityComment.activityCommentDo.TableName()
	_activityComment.ALL = field.NewAsterisk(tableName)
	_activityComment.ID = field.NewInt64(tableName, "id")
	_activityComment.UserID = field.NewInt64(tableName, "user_id")
	_activityComment.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityComment.ParentID = field.NewInt64(tableName, "parent_id")
	_activityComment.Content = field.NewString(tableName, "content")
	_activityComment.CreatedAt = field.NewInt64(tableName, "created_at")
	_activityComment.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_activityComment.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_activityComment.fillFieldMap()

	return _activityComment
}

// activityComment 动态评论表
type activityComment struct {
	activityCommentDo activityCommentDo

	ALL        field.Asterisk
	ID         field.Int64  // 评论ID
	UserID     field.Int64  // 用户ID
	ActivityID field.Int64  // 动态ID
	ParentID   field.Int64  // 父评论ID
	Content    field.String // 评论内容
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 修改时间
	DeletedAt  field.Int64  // 删除时间

	fieldMap map[string]field.Expr
}

func (a activityComment) Table(newTableName string) *activityComment {
	a.activityCommentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityComment) As(alias string) *activityComment {
	a.activityCommentDo.DO = *(a.activityCommentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityComment) updateTableName(table string) *activityComment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UserID = field.NewInt64(table, "user_id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.Content = field.NewString(table, "content")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.UpdatedAt = field.NewInt64(table, "updated_at")
	a.DeletedAt = field.NewInt64(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *activityComment) WithContext(ctx context.Context) *activityCommentDo {
	return a.activityCommentDo.WithContext(ctx)
}

func (a activityComment) TableName() string { return a.activityCommentDo.TableName() }

func (a activityComment) Alias() string { return a.activityCommentDo.Alias() }

func (a activityComment) Columns(cols ...field.Expr) gen.Columns {
	return a.activityCommentDo.Columns(cols...)
}

func (a *activityComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityComment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["content"] = a.Content
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a activityComment) clone(db *gorm.DB) activityComment {
	a.activityCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityComment) replaceDB(db *gorm.DB) activityComment {
	a.activityCommentDo.ReplaceDB(db)
	return a
}

type activityCommentDo struct{ gen.DO }

func (a activityCommentDo) Debug() *activityCommentDo {
	return a.withDO(a.DO.Debug())
}

func (a activityCommentDo) WithContext(ctx context.Context) *activityCommentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityCommentDo) ReadDB() *activityCommentDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityCommentDo) WriteDB() *activityCommentDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityCommentDo) Session(config *gorm.Session) *activityCommentDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityCommentDo) Clauses(conds ...clause.Expression) *activityCommentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityCommentDo) Returning(value interface{}, columns ...string) *activityCommentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityCommentDo) Not(conds ...gen.Condition) *activityCommentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityCommentDo) Or(conds ...gen.Condition) *activityCommentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityCommentDo) Select(conds ...field.Expr) *activityCommentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityCommentDo) Where(conds ...gen.Condition) *activityCommentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityCommentDo) Order(conds ...field.Expr) *activityCommentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityCommentDo) Distinct(cols ...field.Expr) *activityCommentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityCommentDo) Omit(cols ...field.Expr) *activityCommentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityCommentDo) Join(table schema.Tabler, on ...field.Expr) *activityCommentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *activityCommentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *activityCommentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityCommentDo) Group(cols ...field.Expr) *activityCommentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityCommentDo) Having(conds ...gen.Condition) *activityCommentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityCommentDo) Limit(limit int) *activityCommentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityCommentDo) Offset(offset int) *activityCommentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *activityCommentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityCommentDo) Unscoped() *activityCommentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityCommentDo) Create(values ...*model.ActivityComment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityCommentDo) CreateInBatches(values []*model.ActivityComment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityCommentDo) Save(values ...*model.ActivityComment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityCommentDo) First() (*model.ActivityComment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityComment), nil
	}
}

func (a activityCommentDo) Take() (*model.ActivityComment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityComment), nil
	}
}

func (a activityCommentDo) Last() (*model.ActivityComment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityComment), nil
	}
}

func (a activityCommentDo) Find() ([]*model.ActivityComment, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityComment), err
}

func (a activityCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityComment, err error) {
	buf := make([]*model.ActivityComment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityCommentDo) FindInBatches(result *[]*model.ActivityComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityCommentDo) Attrs(attrs ...field.AssignExpr) *activityCommentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityCommentDo) Assign(attrs ...field.AssignExpr) *activityCommentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityCommentDo) Joins(fields ...field.RelationField) *activityCommentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityCommentDo) Preload(fields ...field.RelationField) *activityCommentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityCommentDo) FirstOrInit() (*model.ActivityComment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityComment), nil
	}
}

func (a activityCommentDo) FirstOrCreate() (*model.ActivityComment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityComment), nil
	}
}

func (a activityCommentDo) FindByPage(offset int, limit int) (result []*model.ActivityComment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityCommentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityCommentDo) Delete(models ...*model.ActivityComment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityCommentDo) withDO(do gen.Dao) *activityCommentDo {
	a.DO = *do.(*gen.DO)
	return a
}
