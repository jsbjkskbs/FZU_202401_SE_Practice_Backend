// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sfw/biz/dal/model"
)

func newActivityCommentLike(db *gorm.DB, opts ...gen.DOOption) activityCommentLike {
	_activityCommentLike := activityCommentLike{}

	_activityCommentLike.activityCommentLikeDo.UseDB(db, opts...)
	_activityCommentLike.activityCommentLikeDo.UseModel(&model.ActivityCommentLike{})

	tableName := _activityCommentLike.activityCommentLikeDo.TableName()
	_activityCommentLike.ALL = field.NewAsterisk(tableName)
	_activityCommentLike.UserID = field.NewInt64(tableName, "user_id")
	_activityCommentLike.CommentID = field.NewInt64(tableName, "comment_id")
	_activityCommentLike.CreatedAt = field.NewInt64(tableName, "created_at")
	_activityCommentLike.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_activityCommentLike.fillFieldMap()

	return _activityCommentLike
}

// activityCommentLike 动态评论点赞表
type activityCommentLike struct {
	activityCommentLikeDo activityCommentLikeDo

	ALL       field.Asterisk
	UserID    field.Int64 // 用户ID
	CommentID field.Int64 // 动态评论ID
	CreatedAt field.Int64 // 创建时间
	DeletedAt field.Int64 // 删除时间

	fieldMap map[string]field.Expr
}

func (a activityCommentLike) Table(newTableName string) *activityCommentLike {
	a.activityCommentLikeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityCommentLike) As(alias string) *activityCommentLike {
	a.activityCommentLikeDo.DO = *(a.activityCommentLikeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityCommentLike) updateTableName(table string) *activityCommentLike {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewInt64(table, "user_id")
	a.CommentID = field.NewInt64(table, "comment_id")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.DeletedAt = field.NewInt64(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *activityCommentLike) WithContext(ctx context.Context) *activityCommentLikeDo {
	return a.activityCommentLikeDo.WithContext(ctx)
}

func (a activityCommentLike) TableName() string { return a.activityCommentLikeDo.TableName() }

func (a activityCommentLike) Alias() string { return a.activityCommentLikeDo.Alias() }

func (a activityCommentLike) Columns(cols ...field.Expr) gen.Columns {
	return a.activityCommentLikeDo.Columns(cols...)
}

func (a *activityCommentLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityCommentLike) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["comment_id"] = a.CommentID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a activityCommentLike) clone(db *gorm.DB) activityCommentLike {
	a.activityCommentLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityCommentLike) replaceDB(db *gorm.DB) activityCommentLike {
	a.activityCommentLikeDo.ReplaceDB(db)
	return a
}

type activityCommentLikeDo struct{ gen.DO }

func (a activityCommentLikeDo) Debug() *activityCommentLikeDo {
	return a.withDO(a.DO.Debug())
}

func (a activityCommentLikeDo) WithContext(ctx context.Context) *activityCommentLikeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityCommentLikeDo) ReadDB() *activityCommentLikeDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityCommentLikeDo) WriteDB() *activityCommentLikeDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityCommentLikeDo) Session(config *gorm.Session) *activityCommentLikeDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityCommentLikeDo) Clauses(conds ...clause.Expression) *activityCommentLikeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityCommentLikeDo) Returning(value interface{}, columns ...string) *activityCommentLikeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityCommentLikeDo) Not(conds ...gen.Condition) *activityCommentLikeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityCommentLikeDo) Or(conds ...gen.Condition) *activityCommentLikeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityCommentLikeDo) Select(conds ...field.Expr) *activityCommentLikeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityCommentLikeDo) Where(conds ...gen.Condition) *activityCommentLikeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityCommentLikeDo) Order(conds ...field.Expr) *activityCommentLikeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityCommentLikeDo) Distinct(cols ...field.Expr) *activityCommentLikeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityCommentLikeDo) Omit(cols ...field.Expr) *activityCommentLikeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityCommentLikeDo) Join(table schema.Tabler, on ...field.Expr) *activityCommentLikeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityCommentLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *activityCommentLikeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityCommentLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) *activityCommentLikeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityCommentLikeDo) Group(cols ...field.Expr) *activityCommentLikeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityCommentLikeDo) Having(conds ...gen.Condition) *activityCommentLikeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityCommentLikeDo) Limit(limit int) *activityCommentLikeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityCommentLikeDo) Offset(offset int) *activityCommentLikeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityCommentLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *activityCommentLikeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityCommentLikeDo) Unscoped() *activityCommentLikeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityCommentLikeDo) Create(values ...*model.ActivityCommentLike) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityCommentLikeDo) CreateInBatches(values []*model.ActivityCommentLike, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityCommentLikeDo) Save(values ...*model.ActivityCommentLike) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityCommentLikeDo) First() (*model.ActivityCommentLike, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentLike), nil
	}
}

func (a activityCommentLikeDo) Take() (*model.ActivityCommentLike, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentLike), nil
	}
}

func (a activityCommentLikeDo) Last() (*model.ActivityCommentLike, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentLike), nil
	}
}

func (a activityCommentLikeDo) Find() ([]*model.ActivityCommentLike, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityCommentLike), err
}

func (a activityCommentLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityCommentLike, err error) {
	buf := make([]*model.ActivityCommentLike, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityCommentLikeDo) FindInBatches(result *[]*model.ActivityCommentLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityCommentLikeDo) Attrs(attrs ...field.AssignExpr) *activityCommentLikeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityCommentLikeDo) Assign(attrs ...field.AssignExpr) *activityCommentLikeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityCommentLikeDo) Joins(fields ...field.RelationField) *activityCommentLikeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityCommentLikeDo) Preload(fields ...field.RelationField) *activityCommentLikeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityCommentLikeDo) FirstOrInit() (*model.ActivityCommentLike, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentLike), nil
	}
}

func (a activityCommentLikeDo) FirstOrCreate() (*model.ActivityCommentLike, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentLike), nil
	}
}

func (a activityCommentLikeDo) FindByPage(offset int, limit int) (result []*model.ActivityCommentLike, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityCommentLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityCommentLikeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityCommentLikeDo) Delete(models ...*model.ActivityCommentLike) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityCommentLikeDo) withDO(do gen.Dao) *activityCommentLikeDo {
	a.DO = *do.(*gen.DO)
	return a
}
