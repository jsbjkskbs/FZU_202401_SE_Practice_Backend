// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sfw/biz/dal/model"
)

func newActivityCommentReport(db *gorm.DB, opts ...gen.DOOption) activityCommentReport {
	_activityCommentReport := activityCommentReport{}

	_activityCommentReport.activityCommentReportDo.UseDB(db, opts...)
	_activityCommentReport.activityCommentReportDo.UseModel(&model.ActivityCommentReport{})

	tableName := _activityCommentReport.activityCommentReportDo.TableName()
	_activityCommentReport.ALL = field.NewAsterisk(tableName)
	_activityCommentReport.ID = field.NewInt64(tableName, "id")
	_activityCommentReport.UserID = field.NewInt64(tableName, "user_id")
	_activityCommentReport.CommentID = field.NewInt64(tableName, "comment_id")
	_activityCommentReport.Reason = field.NewString(tableName, "reason")
	_activityCommentReport.Label = field.NewString(tableName, "label")
	_activityCommentReport.CreatedAt = field.NewInt64(tableName, "created_at")
	_activityCommentReport.Status = field.NewString(tableName, "status")
	_activityCommentReport.ResolvedAt = field.NewInt64(tableName, "resolved_at")
	_activityCommentReport.AdminID = field.NewInt64(tableName, "admin_id")

	_activityCommentReport.fillFieldMap()

	return _activityCommentReport
}

// activityCommentReport 动态评论举报表
type activityCommentReport struct {
	activityCommentReportDo activityCommentReportDo

	ALL        field.Asterisk
	ID         field.Int64  // 举报ID
	UserID     field.Int64  // 用户ID
	CommentID  field.Int64  // 动态评论ID
	Reason     field.String // 举报原因
	Label      field.String // 举报标签
	CreatedAt  field.Int64  // 创建时间
	Status     field.String // 举报状态
	ResolvedAt field.Int64  // 解决时间
	AdminID    field.Int64  // 管理员ID

	fieldMap map[string]field.Expr
}

func (a activityCommentReport) Table(newTableName string) *activityCommentReport {
	a.activityCommentReportDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityCommentReport) As(alias string) *activityCommentReport {
	a.activityCommentReportDo.DO = *(a.activityCommentReportDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityCommentReport) updateTableName(table string) *activityCommentReport {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UserID = field.NewInt64(table, "user_id")
	a.CommentID = field.NewInt64(table, "comment_id")
	a.Reason = field.NewString(table, "reason")
	a.Label = field.NewString(table, "label")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.Status = field.NewString(table, "status")
	a.ResolvedAt = field.NewInt64(table, "resolved_at")
	a.AdminID = field.NewInt64(table, "admin_id")

	a.fillFieldMap()

	return a
}

func (a *activityCommentReport) WithContext(ctx context.Context) *activityCommentReportDo {
	return a.activityCommentReportDo.WithContext(ctx)
}

func (a activityCommentReport) TableName() string { return a.activityCommentReportDo.TableName() }

func (a activityCommentReport) Alias() string { return a.activityCommentReportDo.Alias() }

func (a activityCommentReport) Columns(cols ...field.Expr) gen.Columns {
	return a.activityCommentReportDo.Columns(cols...)
}

func (a *activityCommentReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityCommentReport) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["comment_id"] = a.CommentID
	a.fieldMap["reason"] = a.Reason
	a.fieldMap["label"] = a.Label
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["status"] = a.Status
	a.fieldMap["resolved_at"] = a.ResolvedAt
	a.fieldMap["admin_id"] = a.AdminID
}

func (a activityCommentReport) clone(db *gorm.DB) activityCommentReport {
	a.activityCommentReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityCommentReport) replaceDB(db *gorm.DB) activityCommentReport {
	a.activityCommentReportDo.ReplaceDB(db)
	return a
}

type activityCommentReportDo struct{ gen.DO }

func (a activityCommentReportDo) Debug() *activityCommentReportDo {
	return a.withDO(a.DO.Debug())
}

func (a activityCommentReportDo) WithContext(ctx context.Context) *activityCommentReportDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityCommentReportDo) ReadDB() *activityCommentReportDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityCommentReportDo) WriteDB() *activityCommentReportDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityCommentReportDo) Session(config *gorm.Session) *activityCommentReportDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityCommentReportDo) Clauses(conds ...clause.Expression) *activityCommentReportDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityCommentReportDo) Returning(value interface{}, columns ...string) *activityCommentReportDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityCommentReportDo) Not(conds ...gen.Condition) *activityCommentReportDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityCommentReportDo) Or(conds ...gen.Condition) *activityCommentReportDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityCommentReportDo) Select(conds ...field.Expr) *activityCommentReportDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityCommentReportDo) Where(conds ...gen.Condition) *activityCommentReportDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityCommentReportDo) Order(conds ...field.Expr) *activityCommentReportDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityCommentReportDo) Distinct(cols ...field.Expr) *activityCommentReportDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityCommentReportDo) Omit(cols ...field.Expr) *activityCommentReportDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityCommentReportDo) Join(table schema.Tabler, on ...field.Expr) *activityCommentReportDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityCommentReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *activityCommentReportDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityCommentReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *activityCommentReportDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityCommentReportDo) Group(cols ...field.Expr) *activityCommentReportDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityCommentReportDo) Having(conds ...gen.Condition) *activityCommentReportDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityCommentReportDo) Limit(limit int) *activityCommentReportDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityCommentReportDo) Offset(offset int) *activityCommentReportDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityCommentReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *activityCommentReportDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityCommentReportDo) Unscoped() *activityCommentReportDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityCommentReportDo) Create(values ...*model.ActivityCommentReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityCommentReportDo) CreateInBatches(values []*model.ActivityCommentReport, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityCommentReportDo) Save(values ...*model.ActivityCommentReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityCommentReportDo) First() (*model.ActivityCommentReport, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentReport), nil
	}
}

func (a activityCommentReportDo) Take() (*model.ActivityCommentReport, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentReport), nil
	}
}

func (a activityCommentReportDo) Last() (*model.ActivityCommentReport, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentReport), nil
	}
}

func (a activityCommentReportDo) Find() ([]*model.ActivityCommentReport, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityCommentReport), err
}

func (a activityCommentReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityCommentReport, err error) {
	buf := make([]*model.ActivityCommentReport, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityCommentReportDo) FindInBatches(result *[]*model.ActivityCommentReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityCommentReportDo) Attrs(attrs ...field.AssignExpr) *activityCommentReportDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityCommentReportDo) Assign(attrs ...field.AssignExpr) *activityCommentReportDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityCommentReportDo) Joins(fields ...field.RelationField) *activityCommentReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityCommentReportDo) Preload(fields ...field.RelationField) *activityCommentReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityCommentReportDo) FirstOrInit() (*model.ActivityCommentReport, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentReport), nil
	}
}

func (a activityCommentReportDo) FirstOrCreate() (*model.ActivityCommentReport, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityCommentReport), nil
	}
}

func (a activityCommentReportDo) FindByPage(offset int, limit int) (result []*model.ActivityCommentReport, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityCommentReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityCommentReportDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityCommentReportDo) Delete(models ...*model.ActivityCommentReport) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityCommentReportDo) withDO(do gen.Dao) *activityCommentReportDo {
	a.DO = *do.(*gen.DO)
	return a
}
