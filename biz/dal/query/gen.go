// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		Activity:              newActivity(db, opts...),
		ActivityComment:       newActivityComment(db, opts...),
		ActivityCommentLike:   newActivityCommentLike(db, opts...),
		ActivityCommentReport: newActivityCommentReport(db, opts...),
		ActivityLike:          newActivityLike(db, opts...),
		ActivityReport:        newActivityReport(db, opts...),
		Category:              newCategory(db, opts...),
		Follow:                newFollow(db, opts...),
		Message:               newMessage(db, opts...),
		Review:                newReview(db, opts...),
		Tag:                   newTag(db, opts...),
		User:                  newUser(db, opts...),
		Video:                 newVideo(db, opts...),
		VideoComment:          newVideoComment(db, opts...),
		VideoCommentLike:      newVideoCommentLike(db, opts...),
		VideoCommentReport:    newVideoCommentReport(db, opts...),
		VideoLabel:            newVideoLabel(db, opts...),
		VideoLike:             newVideoLike(db, opts...),
		VideoReport:           newVideoReport(db, opts...),
		VideoTag:              newVideoTag(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Activity              activity
	ActivityComment       activityComment
	ActivityCommentLike   activityCommentLike
	ActivityCommentReport activityCommentReport
	ActivityLike          activityLike
	ActivityReport        activityReport
	Category              category
	Follow                follow
	Message               message
	Review                review
	Tag                   tag
	User                  user
	Video                 video
	VideoComment          videoComment
	VideoCommentLike      videoCommentLike
	VideoCommentReport    videoCommentReport
	VideoLabel            videoLabel
	VideoLike             videoLike
	VideoReport           videoReport
	VideoTag              videoTag
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Activity:              q.Activity.clone(db),
		ActivityComment:       q.ActivityComment.clone(db),
		ActivityCommentLike:   q.ActivityCommentLike.clone(db),
		ActivityCommentReport: q.ActivityCommentReport.clone(db),
		ActivityLike:          q.ActivityLike.clone(db),
		ActivityReport:        q.ActivityReport.clone(db),
		Category:              q.Category.clone(db),
		Follow:                q.Follow.clone(db),
		Message:               q.Message.clone(db),
		Review:                q.Review.clone(db),
		Tag:                   q.Tag.clone(db),
		User:                  q.User.clone(db),
		Video:                 q.Video.clone(db),
		VideoComment:          q.VideoComment.clone(db),
		VideoCommentLike:      q.VideoCommentLike.clone(db),
		VideoCommentReport:    q.VideoCommentReport.clone(db),
		VideoLabel:            q.VideoLabel.clone(db),
		VideoLike:             q.VideoLike.clone(db),
		VideoReport:           q.VideoReport.clone(db),
		VideoTag:              q.VideoTag.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Activity:              q.Activity.replaceDB(db),
		ActivityComment:       q.ActivityComment.replaceDB(db),
		ActivityCommentLike:   q.ActivityCommentLike.replaceDB(db),
		ActivityCommentReport: q.ActivityCommentReport.replaceDB(db),
		ActivityLike:          q.ActivityLike.replaceDB(db),
		ActivityReport:        q.ActivityReport.replaceDB(db),
		Category:              q.Category.replaceDB(db),
		Follow:                q.Follow.replaceDB(db),
		Message:               q.Message.replaceDB(db),
		Review:                q.Review.replaceDB(db),
		Tag:                   q.Tag.replaceDB(db),
		User:                  q.User.replaceDB(db),
		Video:                 q.Video.replaceDB(db),
		VideoComment:          q.VideoComment.replaceDB(db),
		VideoCommentLike:      q.VideoCommentLike.replaceDB(db),
		VideoCommentReport:    q.VideoCommentReport.replaceDB(db),
		VideoLabel:            q.VideoLabel.replaceDB(db),
		VideoLike:             q.VideoLike.replaceDB(db),
		VideoReport:           q.VideoReport.replaceDB(db),
		VideoTag:              q.VideoTag.replaceDB(db),
	}
}

type queryCtx struct {
	Activity              *activityDo
	ActivityComment       *activityCommentDo
	ActivityCommentLike   *activityCommentLikeDo
	ActivityCommentReport *activityCommentReportDo
	ActivityLike          *activityLikeDo
	ActivityReport        *activityReportDo
	Category              *categoryDo
	Follow                *followDo
	Message               *messageDo
	Review                *reviewDo
	Tag                   *tagDo
	User                  *userDo
	Video                 *videoDo
	VideoComment          *videoCommentDo
	VideoCommentLike      *videoCommentLikeDo
	VideoCommentReport    *videoCommentReportDo
	VideoLabel            *videoLabelDo
	VideoLike             *videoLikeDo
	VideoReport           *videoReportDo
	VideoTag              *videoTagDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Activity:              q.Activity.WithContext(ctx),
		ActivityComment:       q.ActivityComment.WithContext(ctx),
		ActivityCommentLike:   q.ActivityCommentLike.WithContext(ctx),
		ActivityCommentReport: q.ActivityCommentReport.WithContext(ctx),
		ActivityLike:          q.ActivityLike.WithContext(ctx),
		ActivityReport:        q.ActivityReport.WithContext(ctx),
		Category:              q.Category.WithContext(ctx),
		Follow:                q.Follow.WithContext(ctx),
		Message:               q.Message.WithContext(ctx),
		Review:                q.Review.WithContext(ctx),
		Tag:                   q.Tag.WithContext(ctx),
		User:                  q.User.WithContext(ctx),
		Video:                 q.Video.WithContext(ctx),
		VideoComment:          q.VideoComment.WithContext(ctx),
		VideoCommentLike:      q.VideoCommentLike.WithContext(ctx),
		VideoCommentReport:    q.VideoCommentReport.WithContext(ctx),
		VideoLabel:            q.VideoLabel.WithContext(ctx),
		VideoLike:             q.VideoLike.WithContext(ctx),
		VideoReport:           q.VideoReport.WithContext(ctx),
		VideoTag:              q.VideoTag.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
