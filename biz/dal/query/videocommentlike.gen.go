// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sfw/biz/dal/model"
)

func newVideoCommentLike(db *gorm.DB, opts ...gen.DOOption) videoCommentLike {
	_videoCommentLike := videoCommentLike{}

	_videoCommentLike.videoCommentLikeDo.UseDB(db, opts...)
	_videoCommentLike.videoCommentLikeDo.UseModel(&model.VideoCommentLike{})

	tableName := _videoCommentLike.videoCommentLikeDo.TableName()
	_videoCommentLike.ALL = field.NewAsterisk(tableName)
	_videoCommentLike.UserID = field.NewInt64(tableName, "user_id")
	_videoCommentLike.CommentID = field.NewInt64(tableName, "comment_id")
	_videoCommentLike.CreatedAt = field.NewInt64(tableName, "created_at")
	_videoCommentLike.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_videoCommentLike.fillFieldMap()

	return _videoCommentLike
}

// videoCommentLike 视频评论点赞表
type videoCommentLike struct {
	videoCommentLikeDo videoCommentLikeDo

	ALL       field.Asterisk
	UserID    field.Int64 // 用户ID
	CommentID field.Int64 // 视频评论ID
	CreatedAt field.Int64 // 创建时间
	DeletedAt field.Int64 // 删除时间

	fieldMap map[string]field.Expr
}

func (v videoCommentLike) Table(newTableName string) *videoCommentLike {
	v.videoCommentLikeDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoCommentLike) As(alias string) *videoCommentLike {
	v.videoCommentLikeDo.DO = *(v.videoCommentLikeDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoCommentLike) updateTableName(table string) *videoCommentLike {
	v.ALL = field.NewAsterisk(table)
	v.UserID = field.NewInt64(table, "user_id")
	v.CommentID = field.NewInt64(table, "comment_id")
	v.CreatedAt = field.NewInt64(table, "created_at")
	v.DeletedAt = field.NewInt64(table, "deleted_at")

	v.fillFieldMap()

	return v
}

func (v *videoCommentLike) WithContext(ctx context.Context) *videoCommentLikeDo {
	return v.videoCommentLikeDo.WithContext(ctx)
}

func (v videoCommentLike) TableName() string { return v.videoCommentLikeDo.TableName() }

func (v videoCommentLike) Alias() string { return v.videoCommentLikeDo.Alias() }

func (v videoCommentLike) Columns(cols ...field.Expr) gen.Columns {
	return v.videoCommentLikeDo.Columns(cols...)
}

func (v *videoCommentLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoCommentLike) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["comment_id"] = v.CommentID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
}

func (v videoCommentLike) clone(db *gorm.DB) videoCommentLike {
	v.videoCommentLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoCommentLike) replaceDB(db *gorm.DB) videoCommentLike {
	v.videoCommentLikeDo.ReplaceDB(db)
	return v
}

type videoCommentLikeDo struct{ gen.DO }

func (v videoCommentLikeDo) Debug() *videoCommentLikeDo {
	return v.withDO(v.DO.Debug())
}

func (v videoCommentLikeDo) WithContext(ctx context.Context) *videoCommentLikeDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoCommentLikeDo) ReadDB() *videoCommentLikeDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoCommentLikeDo) WriteDB() *videoCommentLikeDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoCommentLikeDo) Session(config *gorm.Session) *videoCommentLikeDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoCommentLikeDo) Clauses(conds ...clause.Expression) *videoCommentLikeDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoCommentLikeDo) Returning(value interface{}, columns ...string) *videoCommentLikeDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoCommentLikeDo) Not(conds ...gen.Condition) *videoCommentLikeDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoCommentLikeDo) Or(conds ...gen.Condition) *videoCommentLikeDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoCommentLikeDo) Select(conds ...field.Expr) *videoCommentLikeDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoCommentLikeDo) Where(conds ...gen.Condition) *videoCommentLikeDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoCommentLikeDo) Order(conds ...field.Expr) *videoCommentLikeDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoCommentLikeDo) Distinct(cols ...field.Expr) *videoCommentLikeDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoCommentLikeDo) Omit(cols ...field.Expr) *videoCommentLikeDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoCommentLikeDo) Join(table schema.Tabler, on ...field.Expr) *videoCommentLikeDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoCommentLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *videoCommentLikeDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoCommentLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) *videoCommentLikeDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoCommentLikeDo) Group(cols ...field.Expr) *videoCommentLikeDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoCommentLikeDo) Having(conds ...gen.Condition) *videoCommentLikeDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoCommentLikeDo) Limit(limit int) *videoCommentLikeDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoCommentLikeDo) Offset(offset int) *videoCommentLikeDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoCommentLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *videoCommentLikeDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoCommentLikeDo) Unscoped() *videoCommentLikeDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoCommentLikeDo) Create(values ...*model.VideoCommentLike) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoCommentLikeDo) CreateInBatches(values []*model.VideoCommentLike, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoCommentLikeDo) Save(values ...*model.VideoCommentLike) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoCommentLikeDo) First() (*model.VideoCommentLike, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCommentLike), nil
	}
}

func (v videoCommentLikeDo) Take() (*model.VideoCommentLike, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCommentLike), nil
	}
}

func (v videoCommentLikeDo) Last() (*model.VideoCommentLike, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCommentLike), nil
	}
}

func (v videoCommentLikeDo) Find() ([]*model.VideoCommentLike, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoCommentLike), err
}

func (v videoCommentLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoCommentLike, err error) {
	buf := make([]*model.VideoCommentLike, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoCommentLikeDo) FindInBatches(result *[]*model.VideoCommentLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoCommentLikeDo) Attrs(attrs ...field.AssignExpr) *videoCommentLikeDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoCommentLikeDo) Assign(attrs ...field.AssignExpr) *videoCommentLikeDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoCommentLikeDo) Joins(fields ...field.RelationField) *videoCommentLikeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoCommentLikeDo) Preload(fields ...field.RelationField) *videoCommentLikeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoCommentLikeDo) FirstOrInit() (*model.VideoCommentLike, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCommentLike), nil
	}
}

func (v videoCommentLikeDo) FirstOrCreate() (*model.VideoCommentLike, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCommentLike), nil
	}
}

func (v videoCommentLikeDo) FindByPage(offset int, limit int) (result []*model.VideoCommentLike, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoCommentLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoCommentLikeDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoCommentLikeDo) Delete(models ...*model.VideoCommentLike) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoCommentLikeDo) withDO(do gen.Dao) *videoCommentLikeDo {
	v.DO = *do.(*gen.DO)
	return v
}
